{
	# Secrets used for HMAC-signed (not encrypted!) cookies. Only the first is
	# used to create new signatures, but all of them for verification. This
	# rotating in new passphrases and out old ones.
	secrets => ["hunter2"],

	jwt => {
		# time in seconds for a JWT to be valid before requiring refresh or re-auth
		global_admin_expiry => 2592000, # 30 days
		normal_expiry => 86400, # 1 day
	},

	# URI format is postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
	pg => 'postgresql://conch@/conch',

	# Rollbar access token. Must be a token with write permissions
	# rollbar_access_token => '00000000000000000000000000000000',

	# Optional environment string override for rollbar exceptions. If not
	# present, uses the value of $app->mode ('production' with Hypnotoad).
	# rollbar_environment => 'staging',

	features => {
		audit          => 0,
		rollbar        => 0,

		# Stop issuing 'conch' cookies. This does not prevent existing conch
		# cookies from being validated (as long as the secrets are the same).
		# Once all conch clients have been migrated, this should be set to 1.
		# After a month (the expiry time for conch cookies) all existing
		# 'conch' cookie code should be removed
		stop_conch_cookie_issue => 0,
	},

	audit => {
		log_path => "log/audit.log",
		payloads => 0,
	},

	# See all settings at https://metacpan.org/pod/Mojo::Server::Hypnotoad#SETTINGS
	hypnotoad => {
		listen => ['http://*:5000'],

		# operates behind a reverse proxy
		proxy => 1,
	},

	preload_validation_plans => [
		{
			name => 'Conch v1 Legacy Plan: Switch',
			description =>
				'Validation plan containing all validations run in Conch v1 on switches',
			validations => [
				{ name => 'bios_firmware_version', version => 1 },
				{ name => 'cpu_count',             version => 1 },
				{ name => 'cpu_temperature',       version => 1 },
				{ name => 'dimm_count',            version => 1 },
				{ name => 'product_name',          version => 1 },
				{ name => 'ram_total',             version => 1 },
			]
		},
		{
			name => 'Conch v1 Legacy Plan: Server',
			description =>
				'Validation plan containing all validations run in Conch v1 on switches',
			validations => [
				{ name => 'bios_firmware_version', version => 1 },
				{ name => 'cpu_count',             version => 1 },
				{ name => 'cpu_temperature',       version => 1 },
				{ name => 'dimm_count',            version => 1 },
				{ name => 'disk_smart_status',     version => 1 },
				{ name => 'disk_temperature',      version => 1 },
				{ name => 'firmware_current',      version => 1 },
				{ name => 'links_up',              version => 1 },
				{ name => 'nics_num',              version => 1 },
				{ name => 'product_name',          version => 1 },
				{ name => 'ram_total',             version => 1 },
				{ name => 'sas_hdd_num',           version => 1 },
				{ name => 'sas_ssd_num',           version => 1 },
				{ name => 'slog_slot',             version => 1 },
				{ name => 'switch_peers',          version => 1 },
				{ name => 'usb_hdd_num',           version => 1 },
			]
		}
	],

	nytprof => {

		# path to your nytprofhtml script (installed as part of Devel::NYTProf
		# distribution). the plugin will do its best to try to find this so this
		# is optional, just set if you have a none standard path
		nytprofhtml_path => 'local/bin/nytprofhtml',

		# path to store Devel::NYTProf output profiles and generated html pages.
		# options, defaults to "/path/to/your/app/root/dir/nytprof"
		profiles_dir => 'nytprof/',

		# set this to true to allow the plugin to run when in production mode
		# the default value is 0 so you can deploy your app to prod without
		# having to make any changes to config/plugin register
		allow_production => 1,

		# Devel::NYTProf environment options, see the documentation at
		# https://metacpan.org/pod/Devel::NYTProf#NYTPROF-ENVIRONMENT-VARIABLE
		# for a complete list. N.B. you can't supply start or file as these
		# are used internally in the plugin so will be ignored if passed
		env => {
			blocks => 1
		},

		# when to enable Devel::NYTProf profiling - the pre_hook will run
		# to enable_profile and the post_hook will run to disable_profile
		# and finish_profile. the values show here are the defaults so you
		# do not need to provide these options
		#
		# bear in mind the caveats in the Mojolicious docs regarding hooks
		# and that they may not fire in the order you expect - this can
		# affect the NYTProf output and cause some things not to appear
		# (or appear in the wrong order). the defaults below should be
		# sufficient for profiling your code, however you can change these
		#
		# N.B. there is nothing stopping you reversing the order of the
		# hooks, which would cause the Mojolicious framework code to be
		# profiled, or providing hooks that are the same or even invalid. these
		# config options should probably be used with some care
		pre_hook  => 'before_routes',
		post_hook => 'around_dispatch',
		}

}
